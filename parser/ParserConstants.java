/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 5;
  /** RegularExpression Id. */
  int MINUS = 6;
  /** RegularExpression Id. */
  int MULTIPLY = 7;
  /** RegularExpression Id. */
  int LPAR = 8;
  /** RegularExpression Id. */
  int LPARC = 9;
  /** RegularExpression Id. */
  int RPARC = 10;
  /** RegularExpression Id. */
  int RPAR = 11;
  /** RegularExpression Id. */
  int DIVIDE = 12;
  /** RegularExpression Id. */
  int LESS = 13;
  /** RegularExpression Id. */
  int LESSEQ = 14;
  /** RegularExpression Id. */
  int GREATER = 15;
  /** RegularExpression Id. */
  int GREATEREQ = 16;
  /** RegularExpression Id. */
  int EQUALS = 17;
  /** RegularExpression Id. */
  int NOTEQUALS = 18;
  /** RegularExpression Id. */
  int AND = 19;
  /** RegularExpression Id. */
  int OR = 20;
  /** RegularExpression Id. */
  int NOT = 21;
  /** RegularExpression Id. */
  int TFALSE = 22;
  /** RegularExpression Id. */
  int TTRUE = 23;
  /** RegularExpression Id. */
  int COLON = 24;
  /** RegularExpression Id. */
  int COMMA = 25;
  /** RegularExpression Id. */
  int QSTMARK = 26;
  /** RegularExpression Id. */
  int VAL = 27;
  /** RegularExpression Id. */
  int ASSIGN = 28;
  /** RegularExpression Id. */
  int SEMICOLON = 29;
  /** RegularExpression Id. */
  int IF = 30;
  /** RegularExpression Id. */
  int ELSE = 31;
  /** RegularExpression Id. */
  int WHILE = 32;
  /** RegularExpression Id. */
  int PRINT = 33;
  /** RegularExpression Id. */
  int PRINTLN = 34;
  /** RegularExpression Id. */
  int FREE = 35;
  /** RegularExpression Id. */
  int RETURN = 36;
  /** RegularExpression Id. */
  int VAR = 37;
  /** RegularExpression Id. */
  int END = 38;
  /** RegularExpression Id. */
  int ALLOC = 39;
  /** RegularExpression Id. */
  int FUNCTION = 40;
  /** RegularExpression Id. */
  int DOT = 41;
  /** RegularExpression Id. */
  int INTEGER = 42;
  /** RegularExpression Id. */
  int STR = 43;
  /** RegularExpression Id. */
  int BOOL = 44;
  /** RegularExpression Id. */
  int FUN = 45;
  /** RegularExpression Id. */
  int LPARQ = 46;
  /** RegularExpression Id. */
  int RPARQ = 47;
  /** RegularExpression Id. */
  int CONCAT = 48;
  /** RegularExpression Id. */
  int FOR = 49;
  /** RegularExpression Id. */
  int THIS = 50;
  /** RegularExpression Id. */
  int INT = 51;
  /** RegularExpression Id. */
  int STRING = 52;
  /** RegularExpression Id. */
  int DIGIT = 53;
  /** RegularExpression Id. */
  int ID = 54;
  /** RegularExpression Id. */
  int LABEL = 55;
  /** RegularExpression Id. */
  int LETTER = 56;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"(\"",
    "\"{\"",
    "\"}\"",
    "\")\"",
    "\"/\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"false\"",
    "\"true\"",
    "\":\"",
    "\",\"",
    "\"?\"",
    "\"val\"",
    "\"=\"",
    "\";\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"print\"",
    "\"println()\"",
    "\"free\"",
    "\"return\"",
    "\"var\"",
    "<END>",
    "\"alloc\"",
    "\"function\"",
    "\".\"",
    "\"int\"",
    "\"string\"",
    "\"bool\"",
    "\"fun\"",
    "\"[\"",
    "\"]\"",
    "\"@\"",
    "\"for\"",
    "\"this\"",
    "<INT>",
    "<STRING>",
    "<DIGIT>",
    "<ID>",
    "<LABEL>",
    "<LETTER>",
  };

}
