/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;

import ast.*;
import java.util.*;

public class Parser implements ParserConstants {

  final public ASTNode main() throws ParseException {
  ASTNode e;
    e = stmt();
    jj_consume_token(END);
                       {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/* STATEMENT */
  final public ASTNode stmt() throws ParseException {
  ASTNode l, r;
    l = loop();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case LPAR:
      case LPARC:
      case NOT:
      case TFALSE:
      case TTRUE:
      case IF:
      case WHILE:
      case PRINT:
      case PRINTLN:
      case FREE:
      case ALLOC:
      case FUNCTION:
      case LPARQ:
      case FOR:
      case THIS:
      case INT:
      case STRING:
      case ID:
      case LABEL:
        r = loop();
                                         l = new ASTSeq(l,r);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
    }
          {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode loop() throws ParseException {
  Token i; ASTNode e, l, r, rr; List<ASTNode> ln = new ArrayList<ASTNode>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPARC:
      jj_consume_token(LPARC);
      l = progblock();
      jj_consume_token(RPARC);
          {if (true) return l;}
      break;
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(LPAR);
      l = expr();
      jj_consume_token(RPAR);
      r = loop();
                                                      l = new ASTWhile(l,r);
          {if (true) return l;}
      break;
    case FOR:
      jj_consume_token(FOR);
      jj_consume_token(LPAR);
      i = jj_consume_token(ID);
      jj_consume_token(COLON);
      l = expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RPAR:
        jj_consume_token(RPAR);
        r = loop();
                                                                          l = new ASTForEach(i.image, l, r);
        break;
      case COMMA:
        jj_consume_token(COMMA);
        rr = expr();
        jj_consume_token(RPAR);
        r = loop();
                                                                                                                                                             l = new ASTForEachFilter(i.image, l, r, rr);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          {if (true) return l;}
      break;
    case IF:
      jj_consume_token(IF);
      jj_consume_token(LPAR);
      e = expr();
      jj_consume_token(RPAR);
      l = loop();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        r = loop();
                                                                        l = new ASTIfElse(e, l, r);
        break;
      default:
        jj_la1[3] = jj_gen;
                                                                                                          l = new ASTIf(e, l);
      }
          {if (true) return l;}
      break;
    case PRINT:
      jj_consume_token(PRINT);
      jj_consume_token(LPAR);
      l = expr();
      jj_consume_token(RPAR);
                                           l = new ASTPrint(l);
          {if (true) return l;}
      break;
    case PRINTLN:
      jj_consume_token(PRINTLN);
                l = new ASTPrint(null);
          {if (true) return l;}
      break;
    case FREE:
      jj_consume_token(FREE);
      jj_consume_token(LPAR);
      l = expr();
      jj_consume_token(RPAR);
                                          l = new ASTFree(l);
          {if (true) return l;}
      break;
    case MULTIPLY:
    case LPAR:
    case NOT:
    case TFALSE:
    case TTRUE:
    case ALLOC:
    case FUNCTION:
    case LPARQ:
    case THIS:
    case INT:
    case STRING:
    case ID:
    case LABEL:
      l = expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case ASSIGN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGN:
          jj_consume_token(ASSIGN);
          r = expr();
                                       l = new ASTAssign(l,r);
          break;
        case LPAR:
          jj_consume_token(LPAR);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MULTIPLY:
          case LPAR:
          case LPARC:
          case NOT:
          case TFALSE:
          case TTRUE:
          case ALLOC:
          case FUNCTION:
          case LPARQ:
          case THIS:
          case INT:
          case STRING:
          case ID:
          case LABEL:
            ln = params();
            break;
          default:
            jj_la1[4] = jj_gen;
            ;
          }
          jj_consume_token(RPAR);
                                                               l = new ASTApp(l, ln);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
          {if (true) return l;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* EXPRESSION */
  final public ASTNode expr() throws ParseException {
  ASTNode l, r, rr; List<Pair<String, String>> e; List<ASTNode> ln = new ArrayList<ASTNode>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
    case LPAR:
    case NOT:
    case TFALSE:
    case TTRUE:
    case ALLOC:
    case LPARQ:
    case THIS:
    case INT:
    case STRING:
    case ID:
    case LABEL:
      l = or();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QSTMARK:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_2;
        }
        jj_consume_token(QSTMARK);
        r = or();
        jj_consume_token(COLON);
        rr = or();
                                                       l = new ASTCond(l,r,rr);
      }
          {if (true) return l;}
      break;
    case LPARC:
      jj_consume_token(LPARC);
      l = objectblock();
      jj_consume_token(RPARC);
                                          {if (true) return l;}
      break;
    case FUNCTION:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION:
        jj_consume_token(FUNCTION);
        jj_consume_token(LPAR);
        e = args();
        jj_consume_token(RPAR);
        r = block();
                                                           l = new ASTFun(e,r);
        break;
      case LPARC:
        l = block();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          {if (true) return l;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode or() throws ParseException {
  ASTNode l, r;
    l = and();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
      r = and();
                                l = new ASTOr(l,r);
    }
          {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode and() throws ParseException {
  ASTNode l, r;
    l = eqs();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
      r = eqs();
                                 l = new ASTAnd(l,r);
    }
          {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode eqs() throws ParseException {
  ASTNode l, r;
    l = reg();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
      case NOTEQUALS:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
        r = reg();
                                       l = new ASTEquals(l,r);
        break;
      case NOTEQUALS:
        jj_consume_token(NOTEQUALS);
        r = reg();
                                                          l = new ASTNotEquals(l,r);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode reg() throws ParseException {
  ASTNode l, r;
    l = regeq();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS:
      case LESSEQ:
      case GREATER:
      case GREATEREQ:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESS:
        jj_consume_token(LESS);
        r = regeq();
                                       l = new ASTLess(l,r);
        break;
      case LESSEQ:
        jj_consume_token(LESSEQ);
        r = regeq();
                                                         l = new ASTLessEq(l,r);
        break;
      case GREATER:
        jj_consume_token(GREATER);
        r = regeq();
                                                          l = new ASTGreater(l,r);
        break;
      case GREATEREQ:
        jj_consume_token(GREATEREQ);
        r = regeq();
                                                            l = new ASTGreaterEq(l,r);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode regeq() throws ParseException {
  ASTNode l, r;
    l = term();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        r = term();
                                      l = new ASTAdd(l,r);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        r = term();
                                                       l = new ASTSub(l,r);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode term() throws ParseException {
  ASTNode l, r;
    l = term2();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        r = term2();
                                           l = new ASTMul(l,r);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        r = term2();
                                                         l = new ASTDivide(l,r);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode term2() throws ParseException {
  Token i; ASTNode l, r; List<ASTNode> ln = new ArrayList<ASTNode>();
    l = term3();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
      case LPARQ:
      case CONCAT:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        i = jj_consume_token(ID);
                                     l = new ASTRecordVal(l, i.image);
        break;
      case LPARQ:
        jj_consume_token(LPARQ);
        r = expr();
        jj_consume_token(RPARQ);
                                                                 l = new ASTListVal(l, r);
        break;
      case CONCAT:
        jj_consume_token(CONCAT);
        r = expr();
                                                        l = new ASTConcat(l, r);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode term3() throws ParseException {
  Token i; ASTNode l, r; List<ASTNode> ln = new ArrayList<ASTNode>();
    l = unary();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_10;
      }
      jj_consume_token(LPAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case LPAR:
      case LPARC:
      case NOT:
      case TFALSE:
      case TTRUE:
      case ALLOC:
      case FUNCTION:
      case LPARQ:
      case THIS:
      case INT:
      case STRING:
      case ID:
      case LABEL:
        ln = params();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(RPAR);
                                                          l = new ASTApp(l, ln);
    }
                                                                                        {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode unary() throws ParseException {
  ASTNode l;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      l = factor();
                         {if (true) return new ASTNot(l);}
      break;
    case MULTIPLY:
    case LPAR:
    case TFALSE:
    case TTRUE:
    case ALLOC:
    case LPARQ:
    case THIS:
    case INT:
    case STRING:
    case ID:
    case LABEL:
      l = factor();
                 {if (true) return l;}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode factor() throws ParseException {
  Token t; ASTNode e; List<ASTNode> ln = new ArrayList<ASTNode>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      t = jj_consume_token(INT);
                {if (true) return new ASTNum(Integer.parseInt(t.image));}
      break;
    case STRING:
      t = jj_consume_token(STRING);
                   {if (true) return new ASTString(new String(t.image));}
      break;
    case ID:
      t = jj_consume_token(ID);
               {if (true) return new ASTId(t.image);}
      break;
    case THIS:
      t = jj_consume_token(THIS);
                 {if (true) return new ASTThis();}
      break;
    case LABEL:
      t = jj_consume_token(LABEL);
                  {if (true) return new ASTLabel(t.image);}
      break;
    case LPAR:
      jj_consume_token(LPAR);
      e = loop();
      jj_consume_token(RPAR);
                                 {if (true) return e;}
      break;
    case TFALSE:
      jj_consume_token(TFALSE);
                {if (true) return new ASTFalse();}
      break;
    case TTRUE:
      jj_consume_token(TTRUE);
               {if (true) return new ASTTrue();}
      break;
    case MULTIPLY:
      jj_consume_token(MULTIPLY);
      e = factor();
                              {if (true) return new ASTDeref(e);}
      break;
    case ALLOC:
      jj_consume_token(ALLOC);
      jj_consume_token(LPAR);
      e = alloc();
      jj_consume_token(RPAR);
                                            {if (true) return e;}
      break;
    case LPARQ:
      jj_consume_token(LPARQ);
      ln = params();
      jj_consume_token(RPARQ);
                                      {if (true) return new ASTList(ln);}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* AUX */
  final public ASTDecl decl() throws ParseException {
        Token i; ASTNode d, r; List<Pair<String, String>> e;
        ASTDecl list = new ASTDecl();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAL:
      case VAR:
      case FUNCTION:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAL:
        jj_consume_token(VAL);
        i = jj_consume_token(ID);
        jj_consume_token(ASSIGN);
        d = expr();
        jj_consume_token(SEMICOLON);
        break;
      case VAR:
        jj_consume_token(VAR);
        i = jj_consume_token(ID);
        jj_consume_token(ASSIGN);
        d = alloc();
        jj_consume_token(SEMICOLON);
        break;
      case FUNCTION:
        jj_consume_token(FUNCTION);
        i = jj_consume_token(ID);
        jj_consume_token(LPAR);
        e = args();
        jj_consume_token(RPAR);
        r = block();
                                                                           d = new ASTFun(e, r);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        list.addToList(i.image, d);
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode alloc() throws ParseException {
  ASTNode e;
    e = expr();
               {if (true) return new ASTVar(e);}
    throw new Error("Missing return statement in function");
  }

  final public List<ASTNode> params() throws ParseException {
  ASTNode e; List<ASTNode> list = new ArrayList<ASTNode>();
    e = expr();
               list.add(e);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      e = expr();
                                                       list.add(e);
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public List<Pair<String, String>> args() throws ParseException {
  List<Pair<String, String>> list = new ArrayList<Pair<String, String>>(); Token i; String t = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      i = jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        t = type();
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
                                         list.add(new Pair(i.image, t));
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
        i = jj_consume_token(ID);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
          jj_consume_token(COLON);
          t = type();
          break;
        default:
          jj_la1[32] = jj_gen;
          ;
        }
                                                                 list.add(new Pair(i.image, t));
      }
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public String type() throws ParseException {
  Token i; List<String > f; String t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      i = jj_consume_token(INTEGER);
                    {if (true) return i.image;}
      break;
    case BOOL:
      i = jj_consume_token(BOOL);
                 {if (true) return i.image;}
      break;
    case STR:
      i = jj_consume_token(STR);
                {if (true) return i.image;}
      break;
    case MULTIPLY:
      i = jj_consume_token(MULTIPLY);
      type();
                            {if (true) return i.image;}
      break;
    case FUN:
      i = jj_consume_token(FUN);
      jj_consume_token(LPAR);
      f = funtypes();
      jj_consume_token(SEMICOLON);
      t = type();
      jj_consume_token(RPAR);
                                                                          {if (true) return i.image+"("+f+","+t+")";}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<String> funtypes() throws ParseException {
  List<String > list = new ArrayList<String >(); String t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
    case INTEGER:
    case STR:
    case BOOL:
    case FUN:
      t = type();
                  list.add(t);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_14;
        }
        jj_consume_token(COMMA);
        t = type();
                                                          list.add(t);
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode progblock() throws ParseException {
  ASTDecl l; ASTNode r;
    l = decl();
    r = stmt();
                if(l.l.size()!=0) { l.setBody(r); {if (true) return l;} }
                else {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode objectblock() throws ParseException {
  ASTRecord list = new ASTRecord(); Token t; ASTNode r;
    t = jj_consume_token(ID);
    jj_consume_token(COLON);
    r = expr();
                                          list.addToList(t.image, r);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_15;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(ID);
      jj_consume_token(COLON);
      r = expr();
                                                              list.addToList(t.image, r);
    }
                  {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode block() throws ParseException {
  ASTNode d = null, e;
    jj_consume_token(LPARC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULTIPLY:
    case LPAR:
    case LPARC:
    case NOT:
    case TFALSE:
    case TTRUE:
    case VAL:
    case IF:
    case WHILE:
    case PRINT:
    case PRINTLN:
    case FREE:
    case VAR:
    case ALLOC:
    case FUNCTION:
    case LPARQ:
    case FOR:
    case THIS:
    case INT:
    case STRING:
    case ID:
    case LABEL:
      d = progblock();
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    jj_consume_token(RETURN);
    e = expr();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(RPARC);
          if (d!=null)
                e = new ASTBlock(d, e);
          else
                e = new ASTBlock(new ASTTrue(), e);
          {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[40];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000000,0x40e00380,0x2000800,0x80000000,0xe00380,0x10000100,0x10000100,0x40e00380,0x4000000,0x200,0xe00380,0x100000,0x80000,0x60000,0x60000,0x1e000,0x1e000,0x60,0x60,0x1080,0x1080,0x0,0x0,0x100,0xe00380,0xe00180,0xc00180,0x8000000,0x8000000,0x2000000,0x1000000,0x2000000,0x1000000,0x0,0x80,0x2000000,0x80,0x2000000,0x48e00380,0x20000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0xde418f,0x0,0x0,0xdc4180,0x0,0x0,0xde418f,0x0,0x100,0xdc4180,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x14200,0x14200,0x0,0xdc4180,0xdc4080,0xdc4080,0x120,0x120,0x0,0x0,0x0,0x0,0x400000,0x3c00,0x0,0x3c00,0x0,0xde41af,0x0,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[57];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 40; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

                      }
